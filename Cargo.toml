[package]
name = "image"
version = "0.24.5"
edition = "2021"
resolver = "2"

license = "MIT"
description = "Imaging library written in Rust. Provides basic filters and decoders for the most common image formats."
authors = ["The image-rs Developers"]
readme = "README.md"

# crates.io metadata
documentation = "https://docs.rs/image"
repository = "https://github.com/image-rs/image"
homepage = "https://github.com/image-rs/image"
categories = ["multimedia::images", "multimedia::encoding"]

# Crate build related
exclude = ["src/png/testdata/*", "examples/*", "tests/*"]

[lib]
name = "image"
path = "./src/lib.rs"

[dependencies]
bytemuck = { version = "1.7.0", features = [
	"extern_crate_alloc",
] } # includes cast_vec
byteorder = "1.3.2"
num-rational = { version = "0.4", default-features = false }
num-traits = "0.2.0"
gif = { version = "0.12", optional = true }
jpeg = { package = "jpeg-decoder", version = "0.3.0", default-features = false, optional = true }
png = { version = "0.17.6", optional = true }
scoped_threadpool = { version = "0.1", optional = true }
tiff = { version = "0.8.0", optional = true }
ravif = { version = "0.11.0", optional = true }
rgb = { version = "0.8.25", optional = true }
mp4parse = { git = "https://github.com/mozilla/mp4parse-rust", rev = "aaad770a75b115931377b2b65e9b7a30812b77ed", optional = true }
dav1d = { version = "0.9", optional = true }
dcv-color-primitives = { version = "0.5", optional = true }
color_quant = "1.1"
exr = { version = "1.5.0", optional = true }
qoi = { version = "0.4", optional = true }
libwebp = { package = "webp", version = "0.2.2", default-features = false, optional = true }

[dev-dependencies]
crc32fast = "1.2.0"
num-complex = "0.4"
glob = "0.3"
quickcheck = "1"
criterion = "0.4"
# Keep this in sync with the jpeg dependency above. This is used to enable the platform_independent
# feature when testing, so `cargo test` works correctly.
jpeg = { package = "jpeg-decoder", version = "0.3.0", default-features = false, features = [
	"platform_independent",
] }

[features]
default = [
	"avif",
	"bmp",
	"dds",
	"dxt",
	"farbfeld",
	"gif",
	"hdr",
	"ico",
	"jpeg",
	"jpeg_rayon",
	"openexr",
	"png",
	"pnm",
	"qoi",
	"tga",
	"tiff",
	"webp",
]

bmp = []
dds = ["dxt"]
dxt = []
farbfeld = []
hdr = ["scoped_threadpool"]
ico = ["bmp", "png"]
openexr = ["exr"]
pnm = []
qoi = ["dep:qoi"]
tga = []

# Enables WebP decoder support.
webp = []
# Non-default, not included in `webp`. Requires native dependency libwebp.
webp-encoder = ["libwebp"]

# Enables multi-threading.
# Requires latest stable Rust.
jpeg_rayon = ["jpeg/rayon"]
# Non-default, enables avif support.
# Requires latest stable Rust.
avif = ["avif-encoder"]
# Requires latest stable Rust and recent nasm (>= 2.14).
avif-encoder = ["ravif", "rgb"]
# Non-default, even in `avif`. Requires stable Rust and native dependency libdav1d.
avif-decoder = ["mp4parse", "dcv-color-primitives", "dav1d"]

# Build some inline benchmarks. Useful only during development.
# Requires rustc nightly for feature test.
benchmarks = []

[[bench]]
path = "benches/decode.rs"
name = "decode"
harness = false

[[bench]]
path = "benches/encode.rs"
name = "encode"
harness = false

[[bench]]
name = "copy_from"
harness = false
